---
title: "Texas Blackout Analysis"
description: "An investigation of the impacts of the texas blackout on differing census tracts using satalite and US administrative data."
author:
  - name: Carlo Broderick
    url: https://carlobroderick.github.io/
    orcid: 0000-0002-1723-5418
    affiliation: Master of Environmental Data Science Program @ The Bren School (UCSB) & The National Center for Ecological Analysis & Synthesis
    affiliation-url: https://ucsb-meds.github.io/ 
date: 1-10-2023
categories: [Quarto, R, MEDS] # self-defined categories
citation: 
  url: https://carlobroderick.github.io/posts/1-10-2023-quarto-blogs/ 
image: texas_light.jpg
draft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!
bibliography: references.bib
---

## Overview

"In February 2021, the state of Texas suffered a major power crisis, which came about as a result of three severe winter storms sweeping across the United States on February 10--11, 13--17, and 15--20."[^1] For more background, check out these [engineering](https://www.youtube.com/watch?v=08mwXICY4JM&ab_channel=PracticalEngineering) and [political](https://www.youtube.com/watch?v=Zcrsgdl_hP0&ab_channel=Vox) perspectives.

[^1]: Wikipedia. 2021. "2021 Texas power crisis." Last modified October 2, 2021. <https://en.wikipedia.org/wiki/2021_Texas_power_crisis>.

In this blog post I will:\
- estimate the number of homes in Houston that lost power as a result of the first two storms\
- investigate if socioeconomic factors can predict neighborhood power outage

This analysis will be based on remotely-sensed night lights data, acquired from the [Visible Infrared Imaging Radiometer Suite (VIIRS)](https://en.wikipedia.org/wiki/Visible_Infrared_Imaging_Radiometer_Suite) onboard the Suomi satellite. In particular, we will use the VNP46A1 to detect differences in night lights before and after the storm to identify areas that lost electric power.

To determine the number of homes that lost power, we will spatially join these data sets with [OpenStreetMap](https://www.openstreetmap.org/#map=4/38.01/-95.84) data on buildings and roads.

To investigate potential socioeconomic factors that influenced recovery, we will then link your analysis with data from the US Census Bureau.

### Data

#### Night lights

We will use NASA's Worldview to explore the data around the day of the storm. There are several days with too much cloud cover to be useful; however, 2021-02-07 and 2021-02-16 provide two clear, contrasting images to visualize the extent of the power outage in Texas.

VIIRS data is distributed through NASA's [Level-1 and Atmospheric Archive & Distribution System Distributed Active Archive Center (LAADS DAAC)](https://ladsweb.modaps.eosdis.nasa.gov/). Many NASA Earth data products are distributed in 10x10 degree tiles in sinusoidal equal-area projection. Tiles are identified by their horizontal and vertical position in the grid. Houston lies on the border of tiles h08v05 and h08v06. We therefore need to download two tiles per date and join together for a full view of the city.\

-   `VNP46A1.A2021038.h08v05.001.2021039064328.h5.tif`: tile h08v05, collected on 2021-02-07\
-   `VNP46A1.A2021038.h08v06.001.2021039064329.h5.tif`: tile h08v06, collected on 2021-02-07\
-   `VNP46A1.A2021047.h08v05.001.2021048091106.h5.tif`: tile h08v05, collected on 2021-02-16\
-   `VNP46A1.A2021047.h08v06.001.2021048091105.h5.tif`: tile h08v06, collected on 2021-02-16

#### Roads

Typically highways account for a large portion of the night lights observable from space (see Google's [Earth at Night](https://earth.google.com/web/@27.44405464,-84.7693044,206.63660162a,8916361.52264659d,35y,0h,0t,0r/data=CiQSIhIgMGY3ZTJkYzdlOGExMTFlNjk5MGQ2ZjgxOGQ2OWE2ZTc)). To minimize falsely identifying areas with reduced traffic as areas without power, we will ignore areas near highways.

[OpenStreetMap (OSM)](https://planet.openstreetmap.org/) is a collaborative project which creates publicly available geographic data of the world. Ingesting this data into a database where it can be subsetted and processed is a large undertaking. Fortunately, third party companies redistribute OSM data. We will use [Geofabrik's download sites](https://download.geofabrik.de/) to retrieve a shapefile of all highways in Texas and prepared a Geopackage (`.gpkg` file) containing just the subset of roads that intersect the Houston metropolitan area.Â 

-   `gis_osm_roads_free_1.gpkg`

#### Houses

We can also obtain building data from OpenStreetMap. We again downloaded from Geofabrick and prepared a GeoPackage containing only houses in the Houston metropolitan area.\

-   `gis_osm_buildings_a_free_1.gpkg`

#### Socioeconomic

We cannot readily get socioeconomic information for every home, so instead we obtained data from the [U.S. Census Bureau's American Community Survey](https://www.census.gov/programs-surveys/acs) for census tracts in 2019. The *folder* `ACS_2019_5YR_TRACT_48.gdb` is an ArcGIS ["file geodatabase"](https://desktop.arcgis.com/en/arcmap/latest/manage-data/administer-file-gdbs/file-geodatabases.htm), a multi-file proprietary format that's roughly analogous to a GeoPackage file.\

We can use `st_layers()` to explore the contents of the geodatabase. Each layer contains a subset of the fields documents in the [ACS metadata](https://www2.census.gov/geo/docs/maps-data/data/tiger/prejoined/ACSMetadata2011.txt).\

The geodatabase contains a layer holding the geometry information, separate from the layers holding the ACS attributes. We will combine the geometry with the attributes to get a feature layer that `sf` can use.

#### Packages

```{r}
#| echo: true
#| code-fold: true
#| output: false
library(terra)
library(dplyr)
library(spData)
library(spDataLarge)
library(tmap)
library(geodata)
library(sf)
library(tidyverse)
library(rmapshaper)
library(smoothr)
library(stars)
library(here)
```

#### Find locations of blackouts

```{r}
#| echo: true
#| code-fold: true
#| output: false

# read in the two night lights tifs for each time period, before and after the winter storm

raster_2021_02_07_a <- 
  read_stars(here("data", 
                  "VNP46A1", 
                  "VNP46A1.A2021038.h08v05.001.2021039064328.tif"))

raster_2021_02_07_b <- 
  read_stars(here("data", 
                  "VNP46A1", 
                  "VNP46A1.A2021038.h08v06.001.2021039064329.tif"))

raster_2021_02_16_a <- 
  read_stars(here("data", 
                  "VNP46A1",
                  "VNP46A1.A2021047.h08v05.001.2021048091106.tif"))

raster_2021_02_16_b <- 
  read_stars(here("data", 
                  "VNP46A1", 
                  "VNP46A1.A2021047.h08v06.001.2021048091105.tif"))


# combine tiles into a single stars object for each date
mosaic_07 <- st_mosaic(raster_2021_02_07_a, raster_2021_02_07_b)

mosaic_16 <- st_mosaic(raster_2021_02_16_a, raster_2021_02_16_b)

# find the change in night lights
light_dif <- mosaic_07 - mosaic_16

# check out the images created thus far
plot_1 <- plot(mosaic_07)
plot_2 <- plot(mosaic_16)
plot_3 <- plot(light_dif)

# reclassify the difference raster, assuming that any location that experienced a drop of more than 200 nW cm-2sr-1 experienced a blackout
light_dif[light_dif <= 200] = NA
light_dif[light_dif > 200] = 1

# vectorize the blackout mask
sf_lights <- st_as_sf(light_dif)

# fix any invalid geometries, this is required because the st_as_sf function sometimes does not close polygons, this st_make_valid does that for us
sf_lights <- st_make_valid(sf_lights)

# define the Houston metropolitan area
h_poly = list(rbind(c(-96.5, 29), 
                    c(-96.5, 30.5), 
                    c(-94.5, 30.5), 
                    c(-94.5, 29), 
                    c(-96.5, 29)))

houston_polygon <- st_polygon(h_poly)

# convert the polygon into a simple feature collection
houston_area <- st_sfc(houston_polygon, crs = "EPSG:4326")

# crop (spatially subset) the blackout mask to our region of interest
houston_lights_old_crs <- sf_lights[houston_area, ]

# re-project the cropped blackout dataset to EPSG:3083
houston_lights <- st_transform(houston_lights_old_crs , crs = "EPSG:3083")
```

![](images/Screen%20Shot%202023-01-10%20at%208.13.21%20PM.png)

The roads geopackage includes data on roads other than highways. However, we can avoid reading in data we don't need by taking advantage of `st_read`'s ability to subset using a SQL query.

```{r}
#| echo: true
#| code-fold: true
#| output: false


# define SQL query
query <- "SELECT * FROM gis_osm_roads_free_1 WHERE fclass='motorway'"

#load just highway data from geopackage using st_read
highways_WGS_84 <- st_read(file.path("data", "gis_osm_roads_free_1.gpkg"), 
                           query = query)

#reproject data to EPSG:3083
highways <- st_transform(highways_WGS_84, crs = 3083)

# identify areas within 200m of all highways
highway_buffer <- st_buffer(highways, dist = 200)

# desolve all the overlapping buffers
highway_area <- st_union(highway_buffer)

#find areas that experienced blackouts that are further than 200m from a highway
houston_lights_highway <- st_difference(houston_lights, highway_area)
```

#### Find homes impacted by blackouts

```{r}
#| echo: true
#| code-fold: true
#| output: false


#load buildings dataset
query_2 <- "SELECT * FROM gis_osm_buildings_a_free_1 WHERE (type IS NULL AND name IS NULL)"

buildings <- st_read(file.path("data", "gis_osm_buildings_a_free_1.gpkg"),
                     query = query_2)

# reproject data to harmonize CRS
build_3083 <- st_transform(buildings, crs = 3083)
```

#### find homes in blackout areas

```{r}
#| echo: true
#| code-fold: true
#| output: false


# rename to allign with assignment
blackout_area <- houston_lights_highway

# filter to homes within blackout areas
blackout_homes <- build_3083[blackout_area, ]

# count rows
number_of_blackout_homes <- count(blackout_homes)$n
```

#### Investigate socioeconomic factors

```{r}
#| echo: true
#| code-fold: true
#| output: false


# read in data
geom <- st_read(file.path("data", "ACS_2019_5YR_TRACT_48_TEXAS.gdb"), 
               layer = c("ACS_2019_5YR_TRACT_48_TEXAS"))

income_1 <- st_read(file.path("data", "ACS_2019_5YR_TRACT_48_TEXAS.gdb"), 
               layer = c("X19_INCOME"))

# change data around for better use
geom_3083 <- st_transform(geom, crs = 3083)

geom <- geom_3083 |>
  select(-"GEOID") |>
  rename(GEOID = GEOID_Data)

income <- income_1 |>
  dplyr::select("GEOID", "B19013e1")

# combine into one sf object
data <- left_join(geom, income, by = "GEOID")
```

#### determine which census tracts experienced blackouts

```{r}
#| echo: true
#| code-fold: true
#| output: false


# combine into one sf object
data <- left_join(geom, income, by = "GEOID")

# change CRS
data_4326 <- st_transform(data, crs = 4326)

# filter by houston area
houston_area_filter <- st_sfc(houston_polygon, crs = 4326)

houston_data <- data_4326[houston_area_filter, ]

data_houston <- st_transform(houston_data, crs = 3083)

# change column header
data_houston <- data_houston |>
  select(GEOID, B19013e1) |>
  rename(median_income = B19013e1)

# create data set of census tracts that experianced blackouts
census_blackout <- data_houston[blackout_homes, ,op = st_intersects]|>
  mutate(blackout = "yes")
```

#### compare incomes of impacted tracts to unimpacted tracts

```{r}
#| echo: true
#| code-fold: true
#| output: false


# create a map of median income by tract, noting which tracts had blackouts
tm_shape(data_houston)+
  tm_polygons(col = "median_income") +
  tm_shape(census_blackout) +
  tm_dots() +
  tm_layout(main.title = "Houston Census Tract Median Income with Blackout Designation")
  

#create df with column of blackout and no blackout
census_blackout_df <- as.data.frame(census_blackout)

master_vector <- left_join(data_houston, census_blackout_df, by = "GEOID") 

master_df <- master_vector |>
  st_drop_geometry() |>
  mutate(blackout_2 = ifelse(is.na(blackout), "no_blackout", blackout))

# create plot of median tract income by blackout status
ggplot(master_df) +
  geom_jitter(aes(x = blackout_2, 
                  y = median_income.x, 
                  color = blackout_2))

# compare blackout status tracts
master_df |>
  group_by(blackout_2) |>
  summarise(n(), mean(median_income.x, na.rm = TRUE))
```
